package org.abitware.docfinder.ui;

import java.awt.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;
import javax.swing.*;
import org.abitware.docfinder.index.SourceManager;
import org.abitware.docfinder.search.*;
import org.abitware.docfinder.ui.components.*;
import org.abitware.docfinder.ui.workers.*;
import org.abitware.docfinder.watch.LiveIndexService;
import org.abitware.docfinder.watch.NetPollerService;

/**
 * Refactored main window - delegates responsibilities to component panels.
 * Fixed encoding issues in labels and comments.
 */
public class MainWindowRefactored extends JFrame {

    // Core services
    private SearchService searchService;
    private LiveIndexService liveService;
    private NetPollerService netPoller;

    // UI Components
    private final SearchBarPanel searchBar;
    private final FilterBarPanel filterBar;
    private final ResultsPanel resultsPanel;
    private final PreviewPanel previewPanel;
    private final StatusBarPanel statusBar;

    // Menu toggles
    private JCheckBoxMenuItem liveWatchToggle;
    private JCheckBoxMenuItem netPollToggle;

    // Managers
    private final SearchExecutor searchExecutor;
    private final IndexingManager indexingManager;

    // Last query for re-execution
    private String lastQuery = "";

    public MainWindowRefactored(SearchService searchService) {
        super("DocFinder");
        this.searchService = searchService;

        // Initialize managers
        this.searchExecutor = new SearchExecutor(searchService);
        this.indexingManager = new IndexingManager(this);

        // Initialize components
        this.searchBar = new SearchBarPanel();
        this.filterBar = new FilterBarPanel();
        this.resultsPanel = new ResultsPanel();
        this.previewPanel = new PreviewPanel();
        this.statusBar = new StatusBarPanel();

        initializeWindow();
        setupCallbacks();
        buildUI();
        setupMenuBar();
        setupIcons();
    }

    private void initializeWindow() {
        setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        setMinimumSize(new Dimension(900, 560));
        setLocationRelativeTo(null);
        getContentPane().setLayout(new BorderLayout());
    }

    private void setupCallbacks() {
        // Search bar callbacks
        searchBar.setSearchCallback(this::doSearch);
        searchBar.setFilterToggleCallback(() -> filterBar.setVisible(!filterBar.isVisible()));

        // Filter bar callback
        filterBar.setApplyCallback(this::doSearch);

        // Results panel callback
        resultsPanel.setSelectionCallback(this::onResultSelected);
    }

    private void buildUI() {
        // Top: Search bar + filter bar
        JPanel north = new JPanel(new BorderLayout());
        north.add(searchBar, BorderLayout.NORTH);
        north.add(filterBar, BorderLayout.CENTER);

        // Center: Results + Preview
        JSplitPane centerSplit = new JSplitPane(
            JSplitPane.HORIZONTAL_SPLIT,
            resultsPanel,
            previewPanel
        );
        centerSplit.setResizeWeight(0.72);

        // Assemble
        getContentPane().add(north, BorderLayout.NORTH);
        getContentPane().add(centerSplit, BorderLayout.CENTER);
        getContentPane().add(statusBar, BorderLayout.SOUTH);
    }

    private void setupMenuBar() {
        setJMenuBar(MenuBarPanel.createMenuBar(this, this::getMenuCallbacks));
    }

    private void setupIcons() {
        setIconImages(IconUtil.loadAppImages());
        List<Image> imgs = IconUtil.loadAppImages();
        if (!imgs.isEmpty()) {
            Image best = imgs.get(imgs.size() - 1);
            IconUtil.setAppTaskbarIconIfSupported(best);
        }
    }

    private MenuBarPanel.MenuCallbacks getMenuCallbacks() {
        MenuBarPanel.MenuCallbacks callbacks = new MenuBarPanel.MenuCallbacks();
        callbacks.onIndexFolder = this::chooseAndIndexFolder;
        callbacks.onManageSources = this::manageSources;
        callbacks.onIndexAllSources = this::indexAllSources;
        callbacks.onIndexingSettings = this::showIndexingSettings;
        callbacks.onRebuildIndex = this::rebuildAllSources;
        callbacks.onExportCsv = () -> resultsPanel.exportToCsv(this);
        callbacks.onClearHistory = this::clearSearchHistory;
        callbacks.onToggleLiveWatch = this::toggleLiveWatch;
        callbacks.onToggleNetPolling = this::toggleNetPolling;
        callbacks.onPollNow = this::pollOnceNow;
        callbacks.onExit = this::exitApplication;
        callbacks.onShowUsage = this::showUsageDialog;
        callbacks.onShowAbout = this::showAboutDialog;
        return callbacks;
    }

    private void doSearch() {
        if (searchService == null) {
            statusBar.setText("Search service unavailable.");
            return;
        }

        String query = searchBar.getQueryText();
        lastQuery = query;

        if (query.isEmpty()) {
            resultsPanel.clearResults();
            previewPanel.showMessage("Enter a query to search.");
            statusBar.setText("Enter a query to search.");
            return;
        }

        statusBar.setText("Searching...");
        previewPanel.showMessage("Searching...");

        searchExecutor.executeSearch(
            query,
            filterBar.buildFilterState(),
            searchBar.getSelectedScope(),
            searchBar.getSelectedMatchMode(),
            new SearchExecutor.SearchCallback() {
                @Override
                public void onResults(String q, List<SearchResult> results, long elapsedMs) {
                    populateResults(q, results, elapsedMs);
                }

                @Override
                public void onError(Exception ex) {
                    statusBar.setText("Search failed: " + ex.getMessage());
                }

                @Override
                public void onEmpty() {
                    resultsPanel.clearResults();
                    previewPanel.showMessage("Enter a query to search.");
                    statusBar.setText("Ready");
                }
            }
        );
    }

    private void populateResults(String query, List<SearchResult> results, long elapsedMs) {
        if (results == null) {
            results = Collections.emptyList();
        }

        resultsPanel.setResults(results);

        if (results.isEmpty()) {
            statusBar.setText(String.format("No results. | %d ms", elapsedMs));
            previewPanel.showMessage("No results.");
        } else {
            statusBar.setText(String.format("Results: %d  |  %d ms", results.size(), elapsedMs));
        }

        searchBar.addToHistory(query);
    }

    private void onResultSelected(SearchResult result) {
        if (result == null) {
            previewPanel.showMessage("No selection.");
            return;
        }

        try {
            Path path = Paths.get(result.path);
            previewPanel.loadPreview(path, lastQuery);
        } catch (Exception ex) {
            previewPanel.showMessage("Preview unavailable.");
        }
    }

    // ============ Indexing Operations ============

    private void chooseAndIndexFolder() {
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Choose a folder to index");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;

        Path folder = fc.getSelectedFile().toPath();
        Path indexDir = Paths.get(System.getProperty("user.home"), ".docfinder", "index");

        statusBar.setText("Indexing: " + folder + " ...");
        long t0 = System.currentTimeMillis();

        indexingManager.indexFolder(folder, indexDir, new IndexingManager.IndexCallback() {
            @Override
            public void onSuccess(int filesIndexed, Path indexDir) {
                long ms = System.currentTimeMillis() - t0;
                statusBar.setText("Indexed files: " + filesIndexed + " | Time: " + ms + " ms | Index: " + indexDir);
                setSearchService(new org.abitware.docfinder.search.LuceneSearchService(indexDir));
            }

            @Override
            public void onError(Exception ex) {
                statusBar.setText("Index failed: " + ex.getMessage());
            }
        });
    }

    private void indexAllSources() {
        SourceManager sm = new SourceManager();
        List<Path> sources = sm.load();
        if (sources.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No sources configured. Use 'Index Sources...' first.");
            return;
        }

        statusBar.setText("Indexing all sources…");
        long t0 = System.currentTimeMillis();
        Path indexDir = sm.getIndexDir();

        indexingManager.indexAllSources(sources, indexDir, new IndexingManager.IndexCallback() {
            @Override
            public void onSuccess(int filesIndexed, Path indexDir) {
                long ms = System.currentTimeMillis() - t0;
                statusBar.setText("Indexed files: " + filesIndexed + " | Time: " + ms + " ms | Index: " + indexDir);
            }

            @Override
            public void onError(Exception ex) {
                statusBar.setText("Index failed: " + ex.getMessage());
            }
        });
    }

    private void rebuildAllSources() {
        SourceManager sm = new SourceManager();
        List<Path> sources = sm.load();
        if (sources.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No sources configured. Use 'Index Sources...' first.");
            return;
        }

        statusBar.setText("Rebuilding index (full)…");
        long t0 = System.currentTimeMillis();
        Path indexDir = sm.getIndexDir();

        indexingManager.rebuildIndex(sources, indexDir, new IndexingManager.IndexCallback() {
            @Override
            public void onSuccess(int filesIndexed, Path indexDir) {
                long ms = System.currentTimeMillis() - t0;
                statusBar.setText("Rebuilt files: " + filesIndexed + " | Time: " + ms + " ms | Index: " + indexDir);
                setSearchService(new org.abitware.docfinder.search.LuceneSearchService(indexDir));
            }

            @Override
            public void onError(Exception ex) {
                statusBar.setText("Rebuild failed: " + ex.getMessage());
            }
        });
    }

    private void manageSources() {
        new ManageSourcesDialog(this).setVisible(true);
        // Ask if restart watchers is needed...
        // (implementation continues from original)
    }

    private void showIndexingSettings() {
        // Implementation from original MainWindow
        // (settings dialog code)
    }

    // ============ Live Watch & Polling ============

    private void toggleLiveWatch() {
        // Implementation from original
    }

    private void toggleNetPolling() {
        // Implementation from original
    }

    private void pollOnceNow() {
        // Implementation from original
    }

    // ============ UI Actions ============

    private void clearSearchHistory() {
        int ret = JOptionPane.showConfirmDialog(this,
            "This will remove all saved search queries.\nProceed?",
            "Clear Search History",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.WARNING_MESSAGE);
        if (ret != JOptionPane.OK_OPTION) return;

        try {
            searchBar.clearHistory();
            statusBar.setText("Search history cleared.");
            previewPanel.showMessage("Search history cleared.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Failed to clear history:\n" + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void showUsageDialog() {
        // Implementation from original
    }

    private void showAboutDialog() {
        JOptionPane.showMessageDialog(this,
            "DocFinder\n\n" +
            "Local file name & content search.\n" +
            "- Read-only indexing\n" +
            "- Lucene + Tika\n" +
            "- Java 8+\n",
            "About",
            JOptionPane.INFORMATION_MESSAGE);
    }

    private void exitApplication() {
        // Clean shutdown logic
        try {
            if (liveWatchToggle != null && liveWatchToggle.isSelected()) {
                liveWatchToggle.setSelected(false);
                toggleLiveWatch();
            }
            if (netPollToggle != null && netPollToggle.isSelected()) {
                netPollToggle.setSelected(false);
                toggleNetPolling();
            }
        } catch (Exception ignore) {
        }

        try {
            if (SystemTray.isSupported()) {
                SystemTray tray = SystemTray.getSystemTray();
                for (TrayIcon ti : tray.getTrayIcons()) {
                    tray.remove(ti);
                }
            }
        } catch (Exception ignore) {
        }

        try {
            dispose();
        } catch (Exception ignore) {
        }
        System.exit(0);
    }

    // ============ Getters & Setters ============

    public void setSearchService(SearchService svc) {
        this.searchService = svc;
        searchExecutor.setSearchService(svc);
    }

    public JTextField getSearchField() {
        return searchBar.getSearchField();
    }

    public StatusBarPanel getStatusBar() {
        return statusBar;
    }
}

